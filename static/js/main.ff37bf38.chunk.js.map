{"version":3,"sources":["components/images/puddleslogo.svg","components/Navbar.component.js","components/About.component.js","components/Listen.component.js","components/Watch.component.js","components/Contact.component.js","components/Home.component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","to","src","require","alt","React","Component","About","Listen","Watch","Contact","Home","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yLAAAA,EAAOC,QAAU,IAA0B,yC,kJCyC5BC,G,uLAnCP,OACI,6BACI,wBAAIC,UAAU,UACV,wBAAIA,UAAU,qBACV,kBAAC,IAAD,CAAMC,GAAG,UAAT,UAIJ,wBAAID,UAAU,qBACV,kBAAC,IAAD,CAAMC,GAAG,WAAT,WAIJ,wBAAID,UAAU,qBACV,kBAAC,IAAD,CAAMC,GAAG,KACL,yBAAKD,UAAU,aAAaE,IAAOC,EAAS,IAA8BC,IAAI,OAGtF,wBAAIJ,UAAU,qBACV,kBAAC,IAAD,CAAMC,GAAG,UAAT,UAIJ,wBAAID,UAAU,qBACV,kBAAC,IAAD,CAAMC,GAAG,YAAT,kB,GA1BHI,IAAMC,YCFZ,SAASC,IACpB,OACI,qCCFO,SAASC,IACpB,OACI,sCCFO,SAASC,IACpB,OACI,qCCFO,SAASC,IACpB,OACI,uCCFO,SAASC,IACpB,OACI,yBAAKX,UAAU,mBACX,0CCuBGY,MAjBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MACA,6BACA,kBAAC,IAAD,CAAOa,KAAK,IAAIC,OAAK,EAACC,UAAWJ,IACjC,kBAAC,IAAD,CAAOE,KAAK,SAASE,UAAWR,IAChC,kBAAC,IAAD,CAAOM,KAAK,UAAUE,UAAWP,IACjC,kBAAC,IAAD,CAAOK,KAAK,SAASE,UAAWN,IAChC,kBAAC,IAAD,CAAOI,KAAK,WAAWE,UAAWL,OCTtBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ff37bf38.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/puddleslogo.4451cd52.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom'\nimport './Navbar.css'\n\nclass Navbar extends React.Component {\n    render (){\n        return (\n            <nav>\n                <ul className='navbar'>\n                    <li className=\"navbar-item item2\">\n                        <Link to='/About'>\n                            About \n                        </Link>\n                    </li>\n                    <li className=\"navbar-item item3\">\n                        <Link to='/Listen'> \n                            Listen\n                        </Link>\n                    </li>\n                    <li className=\"navbar-item item1\">\n                        <Link to='/'> \n                            <img className='headerLogo' src= { require (\"./images/puddleslogo.svg\") } alt=\"\"/> \n                        </Link>\n                    </li>\n                    <li className=\"navbar-item item4\">\n                        <Link to='/Watch'>\n                            Watch \n                        </Link>\n                    </li>\n                    <li className=\"navbar-item item5\">\n                        <Link to='/contact'>\n                            Contact \n                        </Link>\n                    </li>\n                </ul>\n    \n                \n            </nav>\n        )\n    }\n}\nexport default Navbar","import React from 'react';\n\nexport default function About () {\n    return (\n        <h1>about</h1>\n    )\n}\n","import React from 'react';\n\nexport default function Listen () {\n    return (\n        <h1>Listen</h1>\n    )\n}\n","import React from 'react';\n\nexport default function Watch () {\n    return (\n        <h1>watch</h1>\n    )\n}\n","import React from 'react';\n\nexport default function Contact() {\n    return (\n        <h1>contact</h1>\n    )\n}\n","import React from 'react';\n\nexport default function Home() {\n    return (\n        <div className='animated fadeIn'>\n            <h1>Home-Base</h1>\n        </div>\n    )\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\n\nimport Navbar from './components/Navbar.component'\nimport About from './components/About.component'\nimport Listen from './components/Listen.component'\nimport Watch from './components/Watch.component'\nimport Contact from './components/Contact.component'\nimport Home from './components/Home.component'\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar/>\n        <br/>\n        <Route path='/' exact component={Home} />\n        <Route path='/about' component={About} />\n        <Route path='/listen' component={Listen} />\n        <Route path='/watch' component={Watch} />\n        <Route path='/contact' component={Contact} />\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}